nginx-agent {

  # Command which refreshs configuration to Nginx.
  # There are two variants:
  #  - nginx -s reload
  #  - kill -HUP {PID}
  reload-command="nginx -s reload"

  # Path to file that contains PID of Nginx. This option needs for refreshing configuration of Nginx in runtime by
  # sending signal.
  nginx-pid-file="/var/run/nginx.pid"

  # Path to where generated configs are
  config-path = "/etc/nginx/conf.d"

  # URL to a template that will be used for generation of configs in "config-path" directory.
  #
  # Examples of urls:
  #  - "file:example-template.mustache" - template in file system
  #  - "https://raw.githubusercontent.com/vasyaod/nginx-agent/master/example-template.mustache" - template in file system
  template-url = "default-template.mustache"

  # If there is no any node for a service in DNS then default server and port will be set. In one hand nginx can not work
  # with empty upstreams, in another hand it allow to us show some stub page if the service is down.
  default-server = "127.0.0.1"
  default-port = 80

  # Hash algorithm for node ID generation. Two type of hash function is supported:
  #  * "java" - standart java hash code
  #  * "md5"
  hash-type = "md5"

  # Secret key which is necessary for hash generation of nodeId.
  secret-key = ""

  # Resolve method:
  # - marathon
  # - dns
  resolver = "dns"
  resolver = ${?NGINX_AGENT_RESOLVER}

  dns {
    # Suffix of domain, for example, if we have record _service1._tcp.marathon.mesos that a suffix is "marathon.mesos"
    domain-suffix = "marathon.mesos"

    # Period (seconds) between requests to a DNS server.
    refresh-period = 5
  }

  # Configuration for marathon resolver
  marathon = {

    # List of marathon nodes.
    urls = "marathon.mesos:8080"
    urls = ${?MARATHON_URLS}

    # Period (seconds) between requests to marathon API.
    refresh-period = 5

    # Balancer ID.
    balancer-id = "primary"
    resolver = ${?BALANCER_ID}
  }

  services = [ ]
}

akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "OFF"

  # Possibility to turn off logging of dead letters while the actor system
  # is shutting down. Logging is only done when enabled by 'log-dead-letters'
  # setting.
  log-dead-letters-during-shutdown = off
}